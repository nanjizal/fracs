// Generated by Haxe 4.3.0-rc.1+5f599ba
(function ($global) { "use strict";
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var Test = function() { };
Test.__name__ = true;
Test.main = function() {
	var arr = fracs_Fracs.approximateFractions(0.012);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - 0.012);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	var frac = fracStore;
	var tmp;
	if(frac == null) {
		tmp = "null";
	} else {
		var n = frac.numerator;
		var d = frac.denominator;
		var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? frac.positive ? "" + n : "-" + n : frac.positive ? "" + n + "/" + d : "-" + n + "/" + d;
		tmp = out;
	}
	console.log("src/Test.hx:12:",tmp);
	var all = fracs_Fracs.approximateFractions(-Math.PI);
	var tmp;
	if(all == null) {
		tmp = "null";
	} else {
		var l = all.length;
		var str = "";
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			var tmp1 = all[i];
			var str1;
			if(tmp1 == null) {
				str1 = "null";
			} else {
				var n = tmp1.numerator;
				var d = tmp1.denominator;
				var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? tmp1.positive ? "" + n : "-" + n : tmp1.positive ? "" + n + "/" + d : "-" + n + "/" + d;
				str1 = out;
			}
			str = str + "\n" + str1;
		}
		tmp = str;
	}
	console.log("src/Test.hx:14:"," all " + tmp);
	var p;
	var f;
	console.log("src/Test.hx:17:","from 0 -> 2pi");
	var i = 0.;
	while(i < 2 * Math.PI + Math.PI / 10) {
		var f1;
		if(i <= Math.PI && i > -Math.PI) {
			f1 = i;
		} else {
			var a = (i + Math.PI) % (2 * Math.PI);
			f1 = a >= 0 ? a - Math.PI : a + Math.PI;
		}
		var this1 = f1;
		p = this1;
		var f2 = p / Math.PI;
		var arr = fracs_Fracs.approximateFractions(f2);
		var dist = Infinity;
		var dif;
		var l = arr.length;
		var fracFloat;
		var frac;
		var fracStore = arr[0];
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i1 = _g++;
			var frac1 = arr[i1];
			fracFloat = frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator;
			dif = Math.abs(fracFloat - f2);
			if(dif < dist) {
				dist = dif;
				fracStore = frac1;
			}
		}
		f = fracStore;
		var n = f.numerator;
		var d = f.denominator;
		var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? f.positive ? "" + n : "-" + n : f.positive ? "" + n + "/" + d : "-" + n + "/" + d;
		var out1 = out;
		if(!(f.denominator == 10 || out1 == "0" || out1 == "1")) {
			var dom = Math.round(f.value * 10);
			var numerator = dom;
			var denominator = 10;
			var positive = true;
			var value = null;
			var numNeg = numerator < 0;
			var denoNeg = denominator < 0;
			if(value == null) {
				value = positive ? numerator / denominator : -numerator / denominator;
			}
			if(numNeg || denoNeg) {
				if(!(numNeg && denoNeg)) {
					positive = !positive;
				}
				if(numNeg) {
					numerator = -numerator;
				}
				if(denoNeg) {
					denominator = -denominator;
				}
			}
			var this2 = { numerator : numerator, denominator : denominator, positive : positive, value : value};
			var frac2 = this2;
			var n1 = frac2.numerator;
			var d1 = frac2.denominator;
			var out2 = n1 == 0 ? "0" : n1 == d1 ? "1" : d1 == 1 ? frac2.positive ? "" + n1 : "-" + n1 : frac2.positive ? "" + n1 + "/" + d1 : "-" + n1 + "/" + d1;
			out1 = out2;
		}
		console.log("src/Test.hx:22:",out1 + " pi");
		i += Math.PI / 10;
	}
	console.log("src/Test.hx:25:","from -pi to pi");
	i = -Math.PI;
	while(i < Math.PI + Math.PI / 10) {
		var f1;
		if(i <= Math.PI && i > -Math.PI) {
			f1 = i;
		} else {
			var a = (i + Math.PI) % (2 * Math.PI);
			f1 = a >= 0 ? a - Math.PI : a + Math.PI;
		}
		var this1 = f1;
		p = this1;
		var f2 = p / Math.PI;
		var arr = fracs_Fracs.approximateFractions(f2);
		var dist = Infinity;
		var dif;
		var l = arr.length;
		var fracFloat;
		var frac;
		var fracStore = arr[0];
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i1 = _g++;
			var frac1 = arr[i1];
			fracFloat = frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator;
			dif = Math.abs(fracFloat - f2);
			if(dif < dist) {
				dist = dif;
				fracStore = frac1;
			}
		}
		f = fracStore;
		var tmp;
		if(f == null) {
			tmp = "null";
		} else {
			var n = f.numerator;
			var d = f.denominator;
			var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? f.positive ? "" + n : "-" + n : f.positive ? "" + n + "/" + d : "-" + n + "/" + d;
			tmp = out;
		}
		console.log("src/Test.hx:30:",tmp + " pi");
		i += Math.PI / 10;
	}
	var arr = fracs_Fracs.approximateFractions(3.14159265358979);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - 3.14159265358979);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	var pi = fracStore;
	var arr = fracs_Fracs.approximateFractions(1.414213562);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - 1.414213562);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	var sqrt_2 = fracStore;
	var arr = fracs_Fracs.approximateFractions(1.618033988);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - 1.618033988);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	var goldenRatio = fracStore;
	var arr = fracs_Fracs.approximateFractions(365.2422);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - 365.2422);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	var earthTropicalYear = fracStore;
	var tmp;
	if(pi == null) {
		tmp = "null";
	} else {
		var n = pi.numerator;
		var d = pi.denominator;
		var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? pi.positive ? "" + n : "-" + n : pi.positive ? "" + n + "/" + d : "-" + n + "/" + d;
		tmp = out;
	}
	console.log("src/Test.hx:37:",tmp);
	var tmp;
	if(sqrt_2 == null) {
		tmp = "null";
	} else {
		var n = sqrt_2.numerator;
		var d = sqrt_2.denominator;
		var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? sqrt_2.positive ? "" + n : "-" + n : sqrt_2.positive ? "" + n + "/" + d : "-" + n + "/" + d;
		tmp = out;
	}
	console.log("src/Test.hx:38:",tmp);
	var tmp;
	if(goldenRatio == null) {
		tmp = "null";
	} else {
		var n = goldenRatio.numerator;
		var d = goldenRatio.denominator;
		var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? goldenRatio.positive ? "" + n : "-" + n : goldenRatio.positive ? "" + n + "/" + d : "-" + n + "/" + d;
		tmp = out;
	}
	console.log("src/Test.hx:39:",tmp);
	var tmp;
	if(earthTropicalYear == null) {
		tmp = "null";
	} else {
		var n = earthTropicalYear.numerator;
		var d = earthTropicalYear.denominator;
		var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? earthTropicalYear.positive ? "" + n : "-" + n : earthTropicalYear.positive ? "" + n + "/" + d : "-" + n + "/" + d;
		tmp = out;
	}
	console.log("src/Test.hx:40:",tmp);
	var i = "1/2".indexOf("/");
	var frac;
	if(i != -1) {
		var numerator = Std.parseInt(HxOverrides.substr("1/2",0,i));
		var denominator = Std.parseInt(HxOverrides.substr("1/2",i + 1,"1/2".length));
		var positive = true;
		var value = null;
		var numNeg = numerator < 0;
		var denoNeg = denominator < 0;
		if(value == null) {
			value = positive ? numerator / denominator : -numerator / denominator;
		}
		if(numNeg || denoNeg) {
			if(!(numNeg && denoNeg)) {
				positive = !positive;
			}
			if(numNeg) {
				numerator = -numerator;
			}
			if(denoNeg) {
				denominator = -denominator;
			}
		}
		var this1 = { numerator : numerator, denominator : denominator, positive : positive, value : value};
		frac = this1;
	} else {
		var f1 = parseFloat("1/2");
		var arr = fracs_Fracs.approximateFractions(f1);
		var dist = Infinity;
		var dif;
		var l = arr.length;
		var fracFloat;
		var frac1;
		var fracStore = arr[0];
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			var frac1 = arr[i];
			fracFloat = frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator;
			dif = Math.abs(fracFloat - f1);
			if(dif < dist) {
				dist = dif;
				fracStore = frac1;
			}
		}
		frac = fracStore;
	}
	var frac1 = frac;
	var f1 = (frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator) * Math.PI;
	var f2;
	if(f1 <= Math.PI && f1 > -Math.PI) {
		f2 = f1;
	} else {
		var a = (f1 + Math.PI) % (2 * Math.PI);
		f2 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f2;
	p = this1;
	console.log("src/Test.hx:42:",p == null ? "null" : Std.string(p));
	var f1 = p / Math.PI;
	var arr = fracs_Fracs.approximateFractions(f1);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - f1);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	f = fracStore;
	var tmp;
	if(f == null) {
		tmp = "null";
	} else {
		var n = f.numerator;
		var d = f.denominator;
		var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? f.positive ? "" + n : "-" + n : f.positive ? "" + n + "/" + d : "-" + n + "/" + d;
		tmp = out;
	}
	console.log("src/Test.hx:44:",tmp + "pi");
	console.log("src/Test.hx:45:",p * 180 / Math.PI);
	var arr = fracs_Fracs.approximateFractions(0.333333333333333);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - 0.333333333333333);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	var third = fracStore;
	var tmp;
	if(third == null) {
		tmp = "null";
	} else {
		var n = third.numerator;
		var d = third.denominator;
		var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? third.positive ? "" + n : "-" + n : third.positive ? "" + n + "/" + d : "-" + n + "/" + d;
		tmp = out;
	}
	console.log("src/Test.hx:47:",tmp);
	console.log("src/Test.hx:48:","____");
	console.log("src/Test.hx:49:","N");
	var north = 0;
	console.log("src/Test.hx:51:","E");
	var east = 8;
	var tmp;
	if(north == null) {
		tmp = "null";
	} else {
		var rose32 = north;
		switch(rose32) {
		case 0:
			tmp = "N";
			break;
		case 1:
			tmp = "NbE";
			break;
		case 2:
			tmp = "NNE";
			break;
		case 3:
			tmp = "NEbN";
			break;
		case 4:
			tmp = "NE";
			break;
		case 5:
			tmp = "NEbE";
			break;
		case 6:
			tmp = "ENE";
			break;
		case 7:
			tmp = "EbN";
			break;
		case 8:
			tmp = "E";
			break;
		case 9:
			tmp = "EbS";
			break;
		case 10:
			tmp = "ESE";
			break;
		case 11:
			tmp = "SEbE";
			break;
		case 12:
			tmp = "SE";
			break;
		case 13:
			tmp = "SEbS";
			break;
		case 14:
			tmp = "SSE";
			break;
		case 15:
			tmp = "SbE";
			break;
		case 16:
			tmp = "S";
			break;
		case 17:
			tmp = "SbW";
			break;
		case 18:
			tmp = "SSW";
			break;
		case 19:
			tmp = "SWbS";
			break;
		case 20:
			tmp = "SW";
			break;
		case 21:
			tmp = "SWbW";
			break;
		case 22:
			tmp = "WSW";
			break;
		case 23:
			tmp = "WbS";
			break;
		case 24:
			tmp = "W";
			break;
		case 25:
			tmp = "WbN";
			break;
		case 26:
			tmp = "WNW";
			break;
		case 27:
			tmp = "NWbW";
			break;
		case 28:
			tmp = "NW";
			break;
		case 29:
			tmp = "NWbN";
			break;
		case 30:
			tmp = "NNW";
			break;
		case 31:
			tmp = "NbW";
			break;
		}
	}
	console.log("src/Test.hx:53:","north " + tmp);
	var tmp;
	if(east == null) {
		tmp = "null";
	} else {
		var rose32 = east;
		switch(rose32) {
		case 0:
			tmp = "N";
			break;
		case 1:
			tmp = "NbE";
			break;
		case 2:
			tmp = "NNE";
			break;
		case 3:
			tmp = "NEbN";
			break;
		case 4:
			tmp = "NE";
			break;
		case 5:
			tmp = "NEbE";
			break;
		case 6:
			tmp = "ENE";
			break;
		case 7:
			tmp = "EbN";
			break;
		case 8:
			tmp = "E";
			break;
		case 9:
			tmp = "EbS";
			break;
		case 10:
			tmp = "ESE";
			break;
		case 11:
			tmp = "SEbE";
			break;
		case 12:
			tmp = "SE";
			break;
		case 13:
			tmp = "SEbS";
			break;
		case 14:
			tmp = "SSE";
			break;
		case 15:
			tmp = "SbE";
			break;
		case 16:
			tmp = "S";
			break;
		case 17:
			tmp = "SbW";
			break;
		case 18:
			tmp = "SSW";
			break;
		case 19:
			tmp = "SWbS";
			break;
		case 20:
			tmp = "SW";
			break;
		case 21:
			tmp = "SWbW";
			break;
		case 22:
			tmp = "WSW";
			break;
		case 23:
			tmp = "WbS";
			break;
		case 24:
			tmp = "W";
			break;
		case 25:
			tmp = "WbN";
			break;
		case 26:
			tmp = "WNW";
			break;
		case 27:
			tmp = "NWbW";
			break;
		case 28:
			tmp = "NW";
			break;
		case 29:
			tmp = "NWbN";
			break;
		case 30:
			tmp = "NNW";
			break;
		case 31:
			tmp = "NbW";
			break;
		}
	}
	console.log("src/Test.hx:54:","east " + tmp);
	var v = north - east;
	if(v < 0) {
		var a = v % 32;
		v = a >= 0 ? a : a + 32;
	} else if(v >= 32) {
		v %= 32;
	}
	var r = v;
	var this1 = r;
	var rose = this1;
	var west = rose;
	var tmp;
	if(west == null) {
		tmp = "null";
	} else {
		var rose32 = west;
		switch(rose32) {
		case 0:
			tmp = "N";
			break;
		case 1:
			tmp = "NbE";
			break;
		case 2:
			tmp = "NNE";
			break;
		case 3:
			tmp = "NEbN";
			break;
		case 4:
			tmp = "NE";
			break;
		case 5:
			tmp = "NEbE";
			break;
		case 6:
			tmp = "ENE";
			break;
		case 7:
			tmp = "EbN";
			break;
		case 8:
			tmp = "E";
			break;
		case 9:
			tmp = "EbS";
			break;
		case 10:
			tmp = "ESE";
			break;
		case 11:
			tmp = "SEbE";
			break;
		case 12:
			tmp = "SE";
			break;
		case 13:
			tmp = "SEbS";
			break;
		case 14:
			tmp = "SSE";
			break;
		case 15:
			tmp = "SbE";
			break;
		case 16:
			tmp = "S";
			break;
		case 17:
			tmp = "SbW";
			break;
		case 18:
			tmp = "SSW";
			break;
		case 19:
			tmp = "SWbS";
			break;
		case 20:
			tmp = "SW";
			break;
		case 21:
			tmp = "SWbW";
			break;
		case 22:
			tmp = "WSW";
			break;
		case 23:
			tmp = "WbS";
			break;
		case 24:
			tmp = "W";
			break;
		case 25:
			tmp = "WbN";
			break;
		case 26:
			tmp = "WNW";
			break;
		case 27:
			tmp = "NWbW";
			break;
		case 28:
			tmp = "NW";
			break;
		case 29:
			tmp = "NWbN";
			break;
		case 30:
			tmp = "NNW";
			break;
		case 31:
			tmp = "NbW";
			break;
		}
	}
	console.log("src/Test.hx:56:","west " + tmp);
	var v = east + east;
	if(v < 0) {
		var a = v % 32;
		v = a >= 0 ? a : a + 32;
	} else if(v >= 32) {
		v %= 32;
	}
	var r = v;
	var this1 = r;
	var rose = this1;
	var east3 = rose;
	var tmp;
	if(east3 == null) {
		tmp = "null";
	} else {
		var rose32 = east3;
		switch(rose32) {
		case 0:
			tmp = "N";
			break;
		case 1:
			tmp = "NbE";
			break;
		case 2:
			tmp = "NNE";
			break;
		case 3:
			tmp = "NEbN";
			break;
		case 4:
			tmp = "NE";
			break;
		case 5:
			tmp = "NEbE";
			break;
		case 6:
			tmp = "ENE";
			break;
		case 7:
			tmp = "EbN";
			break;
		case 8:
			tmp = "E";
			break;
		case 9:
			tmp = "EbS";
			break;
		case 10:
			tmp = "ESE";
			break;
		case 11:
			tmp = "SEbE";
			break;
		case 12:
			tmp = "SE";
			break;
		case 13:
			tmp = "SEbS";
			break;
		case 14:
			tmp = "SSE";
			break;
		case 15:
			tmp = "SbE";
			break;
		case 16:
			tmp = "S";
			break;
		case 17:
			tmp = "SbW";
			break;
		case 18:
			tmp = "SSW";
			break;
		case 19:
			tmp = "SWbS";
			break;
		case 20:
			tmp = "SW";
			break;
		case 21:
			tmp = "SWbW";
			break;
		case 22:
			tmp = "WSW";
			break;
		case 23:
			tmp = "WbS";
			break;
		case 24:
			tmp = "W";
			break;
		case 25:
			tmp = "WbN";
			break;
		case 26:
			tmp = "WNW";
			break;
		case 27:
			tmp = "NWbW";
			break;
		case 28:
			tmp = "NW";
			break;
		case 29:
			tmp = "NWbN";
			break;
		case 30:
			tmp = "NNW";
			break;
		case 31:
			tmp = "NbW";
			break;
		}
	}
	console.log("src/Test.hx:58:","east3 " + tmp);
	var v = east3 + east;
	if(v < 0) {
		var a = v % 32;
		v = a >= 0 ? a : a + 32;
	} else if(v >= 32) {
		v %= 32;
	}
	var r = v;
	var this1 = r;
	var rose = this1;
	var east4 = rose;
	var tmp;
	if(east4 == null) {
		tmp = "null";
	} else {
		var rose32 = east4;
		switch(rose32) {
		case 0:
			tmp = "N";
			break;
		case 1:
			tmp = "NbE";
			break;
		case 2:
			tmp = "NNE";
			break;
		case 3:
			tmp = "NEbN";
			break;
		case 4:
			tmp = "NE";
			break;
		case 5:
			tmp = "NEbE";
			break;
		case 6:
			tmp = "ENE";
			break;
		case 7:
			tmp = "EbN";
			break;
		case 8:
			tmp = "E";
			break;
		case 9:
			tmp = "EbS";
			break;
		case 10:
			tmp = "ESE";
			break;
		case 11:
			tmp = "SEbE";
			break;
		case 12:
			tmp = "SE";
			break;
		case 13:
			tmp = "SEbS";
			break;
		case 14:
			tmp = "SSE";
			break;
		case 15:
			tmp = "SbE";
			break;
		case 16:
			tmp = "S";
			break;
		case 17:
			tmp = "SbW";
			break;
		case 18:
			tmp = "SSW";
			break;
		case 19:
			tmp = "SWbS";
			break;
		case 20:
			tmp = "SW";
			break;
		case 21:
			tmp = "SWbW";
			break;
		case 22:
			tmp = "WSW";
			break;
		case 23:
			tmp = "WbS";
			break;
		case 24:
			tmp = "W";
			break;
		case 25:
			tmp = "WbN";
			break;
		case 26:
			tmp = "WNW";
			break;
		case 27:
			tmp = "NWbW";
			break;
		case 28:
			tmp = "NW";
			break;
		case 29:
			tmp = "NWbN";
			break;
		case 30:
			tmp = "NNW";
			break;
		case 31:
			tmp = "NbW";
			break;
		}
	}
	console.log("src/Test.hx:60:","east4 " + tmp);
	var v = east4 + east;
	if(v < 0) {
		var a = v % 32;
		v = a >= 0 ? a : a + 32;
	} else if(v >= 32) {
		v %= 32;
	}
	var r = v;
	var this1 = r;
	var rose = this1;
	var v = 1;
	if(v < 0) {
		var a = v % 32;
		v = a >= 0 ? a : a + 32;
	} else if(v >= 32) {
		v %= 32;
	}
	var r = v;
	var this1 = r;
	var v = rose + this1;
	if(v < 0) {
		var a = v % 32;
		v = a >= 0 ? a : a + 32;
	} else if(v >= 32) {
		v %= 32;
	}
	var r = v;
	var this1 = r;
	var rose = this1;
	var east5 = rose;
	var tmp;
	if(east5 == null) {
		tmp = "null";
	} else {
		var rose32 = east5;
		switch(rose32) {
		case 0:
			tmp = "N";
			break;
		case 1:
			tmp = "NbE";
			break;
		case 2:
			tmp = "NNE";
			break;
		case 3:
			tmp = "NEbN";
			break;
		case 4:
			tmp = "NE";
			break;
		case 5:
			tmp = "NEbE";
			break;
		case 6:
			tmp = "ENE";
			break;
		case 7:
			tmp = "EbN";
			break;
		case 8:
			tmp = "E";
			break;
		case 9:
			tmp = "EbS";
			break;
		case 10:
			tmp = "ESE";
			break;
		case 11:
			tmp = "SEbE";
			break;
		case 12:
			tmp = "SE";
			break;
		case 13:
			tmp = "SEbS";
			break;
		case 14:
			tmp = "SSE";
			break;
		case 15:
			tmp = "SbE";
			break;
		case 16:
			tmp = "S";
			break;
		case 17:
			tmp = "SbW";
			break;
		case 18:
			tmp = "SSW";
			break;
		case 19:
			tmp = "SWbS";
			break;
		case 20:
			tmp = "SW";
			break;
		case 21:
			tmp = "SWbW";
			break;
		case 22:
			tmp = "WSW";
			break;
		case 23:
			tmp = "WbS";
			break;
		case 24:
			tmp = "W";
			break;
		case 25:
			tmp = "WbN";
			break;
		case 26:
			tmp = "WNW";
			break;
		case 27:
			tmp = "NWbW";
			break;
		case 28:
			tmp = "NW";
			break;
		case 29:
			tmp = "NWbN";
			break;
		case 30:
			tmp = "NNW";
			break;
		case 31:
			tmp = "NbW";
			break;
		}
	}
	console.log("src/Test.hx:62:","east5 " + tmp);
	var _ = north;
	var v = _ + 1;
	if(v < 0) {
		var a = v % 32;
		v = a >= 0 ? a : a + 32;
	} else if(v >= 32) {
		v %= 32;
	}
	var r = v;
	var this1 = r;
	north = this1;
	var tmp;
	if(north == null) {
		tmp = "null";
	} else {
		var rose32 = north;
		switch(rose32) {
		case 0:
			tmp = "N";
			break;
		case 1:
			tmp = "NbE";
			break;
		case 2:
			tmp = "NNE";
			break;
		case 3:
			tmp = "NEbN";
			break;
		case 4:
			tmp = "NE";
			break;
		case 5:
			tmp = "NEbE";
			break;
		case 6:
			tmp = "ENE";
			break;
		case 7:
			tmp = "EbN";
			break;
		case 8:
			tmp = "E";
			break;
		case 9:
			tmp = "EbS";
			break;
		case 10:
			tmp = "ESE";
			break;
		case 11:
			tmp = "SEbE";
			break;
		case 12:
			tmp = "SE";
			break;
		case 13:
			tmp = "SEbS";
			break;
		case 14:
			tmp = "SSE";
			break;
		case 15:
			tmp = "SbE";
			break;
		case 16:
			tmp = "S";
			break;
		case 17:
			tmp = "SbW";
			break;
		case 18:
			tmp = "SSW";
			break;
		case 19:
			tmp = "SWbS";
			break;
		case 20:
			tmp = "SW";
			break;
		case 21:
			tmp = "SWbW";
			break;
		case 22:
			tmp = "WSW";
			break;
		case 23:
			tmp = "WbS";
			break;
		case 24:
			tmp = "W";
			break;
		case 25:
			tmp = "WbN";
			break;
		case 26:
			tmp = "WNW";
			break;
		case 27:
			tmp = "NWbW";
			break;
		case 28:
			tmp = "NW";
			break;
		case 29:
			tmp = "NWbN";
			break;
		case 30:
			tmp = "NNW";
			break;
		case 31:
			tmp = "NbW";
			break;
		}
	}
	console.log("src/Test.hx:64:","north " + tmp);
	var f = north / 32;
	var arr = fracs_Fracs.approximateFractions(f);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - f);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	var frac = fracStore;
	var tmp;
	if(frac == null) {
		tmp = "null";
	} else {
		var n = frac.numerator;
		var d = frac.denominator;
		var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? frac.positive ? "" + n : "-" + n : frac.positive ? "" + n + "/" + d : "-" + n + "/" + d;
		tmp = out;
	}
	console.log("src/Test.hx:66:","fraction " + tmp);
	var rose4 = 8;
	console.log("src/Test.hx:68:",rose4 == east);
	var east = 8;
	var tmp;
	if(east == null) {
		tmp = "null";
	} else {
		var rose32 = east;
		switch(rose32) {
		case 0:
			tmp = "N";
			break;
		case 1:
			tmp = "NbE";
			break;
		case 2:
			tmp = "NNE";
			break;
		case 3:
			tmp = "NEbN";
			break;
		case 4:
			tmp = "NE";
			break;
		case 5:
			tmp = "NEbE";
			break;
		case 6:
			tmp = "ENE";
			break;
		case 7:
			tmp = "EbN";
			break;
		case 8:
			tmp = "E";
			break;
		case 9:
			tmp = "EbS";
			break;
		case 10:
			tmp = "ESE";
			break;
		case 11:
			tmp = "SEbE";
			break;
		case 12:
			tmp = "SE";
			break;
		case 13:
			tmp = "SEbS";
			break;
		case 14:
			tmp = "SSE";
			break;
		case 15:
			tmp = "SbE";
			break;
		case 16:
			tmp = "S";
			break;
		case 17:
			tmp = "SbW";
			break;
		case 18:
			tmp = "SSW";
			break;
		case 19:
			tmp = "SWbS";
			break;
		case 20:
			tmp = "SW";
			break;
		case 21:
			tmp = "SWbW";
			break;
		case 22:
			tmp = "WSW";
			break;
		case 23:
			tmp = "WbS";
			break;
		case 24:
			tmp = "W";
			break;
		case 25:
			tmp = "WbN";
			break;
		case 26:
			tmp = "WNW";
			break;
		case 27:
			tmp = "NWbW";
			break;
		case 28:
			tmp = "NW";
			break;
		case 29:
			tmp = "NWbN";
			break;
		case 30:
			tmp = "NNW";
			break;
		case 31:
			tmp = "NbW";
			break;
		}
	}
	console.log("src/Test.hx:70:","east " + tmp);
	console.log("src/Test.hx:71:",east);
	var v = 16;
	if(v < 0) {
		var a = v % 32;
		v = a >= 0 ? a : a + 32;
	} else if(v >= 32) {
		v %= 32;
	}
	var r = v;
	var this1 = r;
	east = this1;
	var tmp;
	if(east == null) {
		tmp = "null";
	} else {
		var rose32 = east;
		switch(rose32) {
		case 0:
			tmp = "N";
			break;
		case 1:
			tmp = "NbE";
			break;
		case 2:
			tmp = "NNE";
			break;
		case 3:
			tmp = "NEbN";
			break;
		case 4:
			tmp = "NE";
			break;
		case 5:
			tmp = "NEbE";
			break;
		case 6:
			tmp = "ENE";
			break;
		case 7:
			tmp = "EbN";
			break;
		case 8:
			tmp = "E";
			break;
		case 9:
			tmp = "EbS";
			break;
		case 10:
			tmp = "ESE";
			break;
		case 11:
			tmp = "SEbE";
			break;
		case 12:
			tmp = "SE";
			break;
		case 13:
			tmp = "SEbS";
			break;
		case 14:
			tmp = "SSE";
			break;
		case 15:
			tmp = "SbE";
			break;
		case 16:
			tmp = "S";
			break;
		case 17:
			tmp = "SbW";
			break;
		case 18:
			tmp = "SSW";
			break;
		case 19:
			tmp = "SWbS";
			break;
		case 20:
			tmp = "SW";
			break;
		case 21:
			tmp = "SWbW";
			break;
		case 22:
			tmp = "WSW";
			break;
		case 23:
			tmp = "WbS";
			break;
		case 24:
			tmp = "W";
			break;
		case 25:
			tmp = "WbN";
			break;
		case 26:
			tmp = "WNW";
			break;
		case 27:
			tmp = "NWbW";
			break;
		case 28:
			tmp = "NW";
			break;
		case 29:
			tmp = "NWbN";
			break;
		case 30:
			tmp = "NNW";
			break;
		case 31:
			tmp = "NbW";
			break;
		}
	}
	console.log("src/Test.hx:73:",tmp);
	var v = east / 16 * Math.PI;
	var rads = v;
	console.log("src/Test.hx:75:",rads);
	var north = 0;
	var nearEast = 3;
	var justAboveNorth = 31;
	var A = justAboveNorth;
	var na = A;
	var nb = nearEast;
	var nearA;
	if(na == nb) {
		nearA = 0;
	} else {
		var nthis = north;
		var da = Math.abs(nthis - na);
		var db = Math.abs(nthis - nb);
		if(da > 16) {
			da = 32 - da;
		}
		if(db > 16) {
			db = 32 - da;
		}
		nearA = da == db ? 0 : da < db ? 1 : -1;
	}
	console.log("src/Test.hx:81:","near north - " + Std.string(nearA == 1));
	var east = 8;
	var na = A;
	var nb = nearEast;
	var notNearEast;
	if(na == nb) {
		notNearEast = 0;
	} else {
		var nthis = east;
		var da = Math.abs(nthis - na);
		var db = Math.abs(nthis - nb);
		if(da > 16) {
			da = 32 - da;
		}
		if(db > 16) {
			db = 32 - da;
		}
		notNearEast = da == db ? 0 : da < db ? 1 : -1;
	}
	console.log("src/Test.hx:84:","not near east - " + Std.string(notNearEast == 1));
	console.log("src/Test.hx:85:","isNorth north " + Std.string(0 == north));
};
var fracs_Fracs = function() { };
fracs_Fracs.__name__ = true;
fracs_Fracs.approximateFractions = function(f) {
	var positive = f <= 0 ? false : true;
	var numerators = [0,1];
	var denominators = [1,0];
	var f2 = f <= 0 ? -f : f;
	var fStr = f2 == null ? "null" : "" + f2;
	var digits = "";
	var ix = fStr.indexOf(".");
	if(ix == -1) {
		digits = fStr;
	} else if(ix == 0) {
		digits = HxOverrides.substr(fStr,1,fStr.length);
	} else if(ix < fStr.length) {
		digits = HxOverrides.substr(fStr,0,ix) + HxOverrides.substr(fStr,ix + 1,fStr.length);
	}
	var LStr = digits;
	var numDigits = LStr.length;
	var L2 = f2;
	var numIntDigits = Std.string(L2).length;
	if(L2 == 0) {
		numIntDigits = 0;
	}
	var numDigitsPastDecimal = numDigits - numIntDigits;
	var i = numDigitsPastDecimal;
	var L = parseFloat(digits);
	while(i > 0 && L % 2 == 0) {
		L /= 2;
		--i;
	}
	i = numDigitsPastDecimal;
	while(i > 0 && L % 5 == 0) {
		L /= 5;
		--i;
	}
	var maxNumerator = L;
	var d2 = f2;
	var calcD;
	var prevCalcD = null;
	var val = null;
	var this1 = val == null ? [] : val;
	var arrFraction = this1;
	var j = 0;
	var _g = 2;
	while(_g < 1000) {
		var i = _g++;
		var L2 = Math.floor(d2);
		numerators[i] = L2 * numerators[i - 1] + numerators[i - 2] | 0;
		if(Math.abs(numerators[i]) > maxNumerator) {
			break;
		}
		denominators[i] = L2 * denominators[i - 1] + denominators[i - 2] | 0;
		calcD = numerators[i] / denominators[i];
		if(calcD == prevCalcD) {
			break;
		}
		var numerator = numerators[i];
		var denominator = denominators[i];
		var positive1 = positive;
		var value = f;
		if(positive1 == null) {
			positive1 = true;
		}
		var numNeg = numerator < 0;
		var denoNeg = denominator < 0;
		if(value == null) {
			value = positive1 ? numerator / denominator : -numerator / denominator;
		}
		if(numNeg || denoNeg) {
			if(!(numNeg && denoNeg)) {
				positive1 = !positive1;
			}
			if(numNeg) {
				numerator = -numerator;
			}
			if(denoNeg) {
				denominator = -denominator;
			}
		}
		var this1 = { numerator : numerator, denominator : denominator, positive : positive1, value : value};
		arrFraction[arrFraction.length] = this1;
		if(calcD == f2) {
			break;
		}
		prevCalcD = calcD;
		d2 = 1 / (d2 - L2);
	}
	return arrFraction;
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Test.main();
})({});
